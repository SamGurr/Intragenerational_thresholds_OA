library("XML")
library("plyr")
xmlfile <- xmlParse("http://192.168.1.100:80/cgi-bin/datalog.xml?sdate=190722&days=14") #read in the date plus x days of Apex data
Apex.Data <- ldply(xmlToList(xmlfile), data.frame) #convert xml to dataframe
head(Apex.Data) # check the first few lines to see the first few hrs of the extracted data
tail(Apex.Data) # check to end to dertmine if the xmlParse extracted up to present day
Apex.Data2 <- Apex.Data[4:nrow(Apex.Data),] #remove extra metadata from top
Apex.Data2 <- head(Apex.Data2,-2) #remove extra metadata from bottom
xmlfile <- xmlParse("http://192.168.1.100:80/cgi-bin/datalog.xml?sdate=190722&days=14") #read in the date plus x days of Apex data
library("XML")
library("plyr")
xmlfile <- xmlParse("http://192.168.1.100:80/cgi-bin/datalog.xml?sdate=190722&days=14") #read in the date plus x days of Apex data
Apex.Data <- ldply(xmlToList(xmlfile), data.frame) #convert xml to dataframe
head(Apex.Data) # check the first few lines to see the first few hrs of the extracted data
tail(Apex.Data) # check to end to dertmine if the xmlParse extracted up to present day
Apex.Data2 <- Apex.Data[4:nrow(Apex.Data),] #remove extra metadata from top
Apex.Data2 <- head(Apex.Data2,-2) #remove extra metadata from bottom
# view data and names to ID the raw probe.name or probe.type or probe.value
Apex.Data2
tail(Apex.Data2) # check most recent data
names(Apex.Data2)
# Column names modified as of 20190220 - new apex (from broodstock set-up) moved to conicals due to a malfunction
# Date.Time = column 3
# TMP_T0 = column 6
# pH_T0= column 9
# TMP_T4 = column 69
# pH_T4 = column 72
# TMP_T6 = column 75
# pH_T6 = column 78
# TMP_T5 = column 81
# pH_T5 = column 84
# TMP_T1 = column 87
# pH_T1 = column 90
# TMP_T7 = column 93
# pH_T7 = column 96
# TMP_T3 = column 99
# pH_T3 = column 102
# TMP_T2 = column 105
# pH_T2 = column 108 pH_T2
# NOTE: 18 in total above
#keep columnes with data of interest. This needs to be changed as it will be specific to the Apex configuration
Probe.Data <- Apex.Data2[,c(3,6,9,69,72,75,78,81,84,87,90,93,96,99,102,105,108)] #select columns
colnames(Probe.Data) <- c("Date.Time", "TMP_T0", "pH_T0", "TMP_T4", "pH_T4", "TMP_T6","pH_T6",
"TMP_T5", "pH_T5", "TMP_T1", "pH_T1", "TMP_T7", "pH_T7", "TMP_T3",
"pH_T3", "TMP_T2", "pH_T2")  #rename columns
Probe.Data$Date.Time <- as.POSIXct(Probe.Data$Date.Time, format = "%m/%d/%Y %H:%M:%S", tz="HST") #convert date to HI time
# tail(Probe.Data) # to view the newest data and compare to APEX fusion for assigning column names
# CHANGE DATE FOR NEW CSV (risk overwritting previous)
write.csv(Probe.Data, "C:/Users/samjg/Documents/My_Projects/Inragenerational_thresholds_OA/RAnalysis/Data/Apex_data/Output/20190805_Apex_Data_Output.data.csv") #write file to save data
#plot Temp and pH and save to output
# CHANGE DATE FOR NEW PDF (risk overwritting previous)
pdf("C:/Users/samjg/Documents/My_Projects/Inragenerational_thresholds_OA/RAnalysis/Data/Apex_data/Graphs/20190805_Apex_Data_Output.data.pdf")
par(mfrow=c(2,1))
plot(as.numeric(as.character(TMP_T0)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(10, 20),  xlab="Time", ylab="Temperature Â°C")
lines(as.numeric(as.character(TMP_T1)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(TMP_T2)) ~ Date.Time, Probe.Data, col = "blue")
lines(as.numeric(as.character(TMP_T3)) ~ Date.Time, Probe.Data, col = "black")
lines(as.numeric(as.character(TMP_T4)) ~ Date.Time, Probe.Data, col = "green")
lines(as.numeric(as.character(TMP_T5)) ~ Date.Time, Probe.Data, col = "purple")
lines(as.numeric(as.character(TMP_T6)) ~ Date.Time, Probe.Data, col = "orange")
lines(as.numeric(as.character(TMP_T7)) ~ Date.Time, Probe.Data, col = "brown")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(pH_T0)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(3.5, 8.5),  xlab="Time", ylab="pH NBS")
lines(as.numeric(as.character(pH_T1)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(pH_T2)) ~ Date.Time, Probe.Data, col = "blue")
lines(as.numeric(as.character(pH_T3)) ~ Date.Time, Probe.Data, col = "black")
lines(as.numeric(as.character(pH_T4)) ~ Date.Time, Probe.Data, col = "green")
lines(as.numeric(as.character(pH_T5)) ~ Date.Time, Probe.Data, col = "purple")
lines(as.numeric(as.character(pH_T6)) ~ Date.Time, Probe.Data, col = "orange")
lines(as.numeric(as.character(pH_T7)) ~ Date.Time, Probe.Data, col = "brown")
axis.POSIXct(side=1, Probe.Data$Date.Time)
# plot(as.numeric(as.character(Salt_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(20, 35),  xlab="Time", ylab="Salinity psu")
# lines(as.numeric(as.character(Salt_L)) ~ Date.Time, Probe.Data, col = "red")
# lines(as.numeric(as.character(Salt_A)) ~ Date.Time, Probe.Data, col = "blue")
# axis.POSIXct(side=1, Probe.Data$Date.Time)
dev.off()
#plot Temp and pH and save to output
# CHANGE DATE FOR NEW PDF (risk overwritting previous)
pdf("C:/Users/samjg/Documents/My_Projects/Inragenerational_thresholds_OA/RAnalysis/Data/Apex_data/Graphs/20190805_Apex_Data_Output.data.pdf")
par(mfrow=c(2,1))
plot(as.numeric(as.character(TMP_T0)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(15, 20),  xlab="Time", ylab="Temperature Â°C")
lines(as.numeric(as.character(TMP_T1)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(TMP_T2)) ~ Date.Time, Probe.Data, col = "blue")
lines(as.numeric(as.character(TMP_T3)) ~ Date.Time, Probe.Data, col = "black")
lines(as.numeric(as.character(TMP_T4)) ~ Date.Time, Probe.Data, col = "green")
lines(as.numeric(as.character(TMP_T5)) ~ Date.Time, Probe.Data, col = "purple")
lines(as.numeric(as.character(TMP_T6)) ~ Date.Time, Probe.Data, col = "orange")
lines(as.numeric(as.character(TMP_T7)) ~ Date.Time, Probe.Data, col = "brown")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(pH_T0)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(6, 8.5),  xlab="Time", ylab="pH NBS")
lines(as.numeric(as.character(pH_T1)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(pH_T2)) ~ Date.Time, Probe.Data, col = "blue")
lines(as.numeric(as.character(pH_T3)) ~ Date.Time, Probe.Data, col = "black")
lines(as.numeric(as.character(pH_T4)) ~ Date.Time, Probe.Data, col = "green")
lines(as.numeric(as.character(pH_T5)) ~ Date.Time, Probe.Data, col = "purple")
lines(as.numeric(as.character(pH_T6)) ~ Date.Time, Probe.Data, col = "orange")
lines(as.numeric(as.character(pH_T7)) ~ Date.Time, Probe.Data, col = "brown")
axis.POSIXct(side=1, Probe.Data$Date.Time)
# plot(as.numeric(as.character(Salt_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(20, 35),  xlab="Time", ylab="Salinity psu")
# lines(as.numeric(as.character(Salt_L)) ~ Date.Time, Probe.Data, col = "red")
# lines(as.numeric(as.character(Salt_A)) ~ Date.Time, Probe.Data, col = "blue")
# axis.POSIXct(side=1, Probe.Data$Date.Time)
dev.off()
ed reminders on lines 39 and 43 to prevent overwritting files ->  SJG
library("XML")
library("plyr")
xmlfile <- xmlParse("http://192.168.1.100:80/cgi-bin/datalog.xml?sdate=190809&days=7") #read in the date plus x days of Apex data
Apex.Data <- ldply(xmlToList(xmlfile), data.frame) #convert xml to dataframe
head(Apex.Data) # check the first few lines to see the first few hrs of the extracted data
tail(Apex.Data) # check to end to dertmine if the xmlParse extracted up to present day
Apex.Data2 <- Apex.Data[4:nrow(Apex.Data),] #remove extra metadata from top
Apex.Data2 <- head(Apex.Data2,-2) #remove extra metadata from bottom
# view data and names to ID the raw probe.name or probe.type or probe.value
Apex.Data2
tail(Apex.Data2) # check most recent data
names(Apex.Data2)
tail(Apex.Data2) # check most recent data
# Column names modified as of 20190220 - new apex (from broodstock set-up) moved to conicals due to a malfunction
# Date.Time = column 3
# TMP_T0 = column 6
# pH_T0= column 9
# TMP_T4 = column 69
# pH_T4 = column 72
# TMP_T6 = column 75
# pH_T6 = column 78
# TMP_T5 = column 81
# pH_T5 = column 84
# TMP_T1 = column 87
# pH_T1 = column 90
# TMP_T7 = column 93
# pH_T7 = column 96
# TMP_T3 = column 99
# pH_T3 = column 102
# TMP_T2 = column 105
# pH_T2 = column 108 pH_T2
# NOTE: 18 in total above
#keep columnes with data of interest. This needs to be changed as it will be specific to the Apex configuration
Probe.Data <- Apex.Data2[,c(3,6,9,69,72,75,78,81,84,87,90,93,96,99,102,105,108)] #select columns
colnames(Probe.Data) <- c("Date.Time", "TMP_T0", "pH_T0", "TMP_T4", "pH_T4", "TMP_T6","pH_T6",
"TMP_T5", "pH_T5", "TMP_T1", "pH_T1", "TMP_T7", "pH_T7", "TMP_T3",
"pH_T3", "TMP_T2", "pH_T2")  #rename columns
Probe.Data$Date.Time <- as.POSIXct(Probe.Data$Date.Time, format = "%m/%d/%Y %H:%M:%S", tz="HST") #convert date to HI time
# tail(Probe.Data) # to view the newest data and compare to APEX fusion for assigning column names
# CHANGE DATE FOR NEW CSV (risk overwritting previous)
write.csv(Probe.Data, "C:/Users/samjg/Documents/My_Projects/Inragenerational_thresholds_OA/RAnalysis/Data/Apex_data/Output/20190815_Apex_Data_Output.data.csv") #write file to save data
#plot Temp and pH and save to output
# CHANGE DATE FOR NEW PDF (risk overwritting previous)
pdf("C:/Users/samjg/Documents/My_Projects/Inragenerational_thresholds_OA/RAnalysis/Data/Apex_data/Graphs/20190815_Apex_Data_Output.data.pdf")
par(mfrow=c(2,1))
plot(as.numeric(as.character(TMP_T0)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(15, 20),  xlab="Time", ylab="Temperature Â°C")
lines(as.numeric(as.character(TMP_T1)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(TMP_T2)) ~ Date.Time, Probe.Data, col = "blue")
lines(as.numeric(as.character(TMP_T3)) ~ Date.Time, Probe.Data, col = "black")
lines(as.numeric(as.character(TMP_T4)) ~ Date.Time, Probe.Data, col = "green")
lines(as.numeric(as.character(TMP_T5)) ~ Date.Time, Probe.Data, col = "purple")
lines(as.numeric(as.character(TMP_T6)) ~ Date.Time, Probe.Data, col = "orange")
lines(as.numeric(as.character(TMP_T7)) ~ Date.Time, Probe.Data, col = "brown")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(pH_T0)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(6, 8.5),  xlab="Time", ylab="pH NBS")
lines(as.numeric(as.character(pH_T1)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(pH_T2)) ~ Date.Time, Probe.Data, col = "blue")
lines(as.numeric(as.character(pH_T3)) ~ Date.Time, Probe.Data, col = "black")
lines(as.numeric(as.character(pH_T4)) ~ Date.Time, Probe.Data, col = "green")
lines(as.numeric(as.character(pH_T5)) ~ Date.Time, Probe.Data, col = "purple")
lines(as.numeric(as.character(pH_T6)) ~ Date.Time, Probe.Data, col = "orange")
lines(as.numeric(as.character(pH_T7)) ~ Date.Time, Probe.Data, col = "brown")
axis.POSIXct(side=1, Probe.Data$Date.Time)
# plot(as.numeric(as.character(Salt_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(20, 35),  xlab="Time", ylab="Salinity psu")
# lines(as.numeric(as.character(Salt_L)) ~ Date.Time, Probe.Data, col = "red")
# lines(as.numeric(as.character(Salt_A)) ~ Date.Time, Probe.Data, col = "blue")
# axis.POSIXct(side=1, Probe.Data$Date.Time)
dev.off()
te Last Modified: 20191008
#See Readme file for details
rm(list=ls()) #clears workspace
## install packages if you dont already have them in your library
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr')
#Read in required libraries
library(dplyr)          # Version 0.7.6, Packaged: 2018-06-27, Depends: R (>= 3.1.2)Imports: assertthat (>= 0.2.0), bindrcpp (>= 0.2.0.9000), glue (>=1.1.1), magrittr (>= 1.5), methods, pkgconfig (>= 2.0.1), R6(>= 2.2.2), Rcpp (>= 0.12.15), rlang (>= 0.2.0), tibble (>=1.3.1), tidyselect (>= 0.2.3), utils
#Required Data files
# Set Working Directory:
# setwd("~/MyProjects/Geoduck_Conditioning/RAnalysis/") #set working
setwd("C:/Users/samjg/Documents/My_Projects/Inragenerational_thresholds_OA/RAnalysis/")
#Load Sample Info
samples.TREAT.IDs <- read.csv(file="Sample.Tracker/Geoduck.sample.tracker.csv", header=T) #read sample.info data
samples.BOX.IDs <- read.csv(file="Sample.Tracker/Geoduck.Storage.Box.ID.csv", header=T) #read sample.info data
ID.reference.all <- read.csv(file="Data/Tank.ID.reference.subsequent.csv", header=T) #read sample.info data
ID.reference.all.condensed <- ID.reference.all %>% dplyr::select(Tank.ID, TREATMENT.ID.TOTAL)
ID.reference.all
samples.BOX.IDs
ee Readme file for details
rm(list=ls()) #clears workspace
## install packages if you dont already have them in your library
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr')
#Read in required libraries
library(dplyr)          # Version 0.7.6, Packaged: 2018-06-27, Depends: R (>= 3.1.2)Imports: assertthat (>= 0.2.0), bindrcpp (>= 0.2.0.9000), glue (>=1.1.1), magrittr (>= 1.5), methods, pkgconfig (>= 2.0.1), R6(>= 2.2.2), Rcpp (>= 0.12.15), rlang (>= 0.2.0), tibble (>=1.3.1), tidyselect (>= 0.2.3), utils
#Required Data files
# Set Working Directory:
# setwd("~/MyProjects/Geoduck_Conditioning/RAnalysis/") #set working
setwd("C:/Users/samjg/Documents/My_Projects/Inragenerational_thresholds_OA/RAnalysis/")
#Load Sample Info
samples.TREAT.IDs <- read.csv(file="Sample.Tracker/Geoduck.sample.tracker.csv", header=T) #read sample.info data
samples.BOX.IDs <- read.csv(file="Sample.Tracker/Geoduck.Storage.Box.ID.csv", header=T) #read sample.info data
ID.reference.all <- read.csv(file="Data/Tank.ID.reference.subsequent.csv", header=T) #read sample.info data
ID.reference.all.condensed <- ID.reference.all %>% dplyr::select(Tank.ID, TREATMENT.ID.TOTAL)
ID.reference.all
samples.BOX.IDs
fied: 20191008
#See Readme file for details
rm(list=ls()) #clears workspace
## install packages if you dont already have them in your library
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr')
#Read in required libraries
library(dplyr)          # Version 0.7.6, Packaged: 2018-06-27, Depends: R (>= 3.1.2)Imports: assertthat (>= 0.2.0), bindrcpp (>= 0.2.0.9000), glue (>=1.1.1), magrittr (>= 1.5), methods, pkgconfig (>= 2.0.1), R6(>= 2.2.2), Rcpp (>= 0.12.15), rlang (>= 0.2.0), tibble (>=1.3.1), tidyselect (>= 0.2.3), utils
#Required Data files
# Set Working Directory:
# setwd("~/MyProjects/Geoduck_Conditioning/RAnalysis/") #set working
setwd("C:/Users/samjg/Documents/My_Projects/Inragenerational_thresholds_OA/RAnalysis/")
#Load Sample Info
samples.TREAT.IDs <- read.csv(file="Sample.Tracker/Geoduck.sample.tracker.csv", header=T) #read sample.info data
samples.BOX.IDs <- read.csv(file="Sample.Tracker/Geoduck.Storage.Box.ID.csv", header=T) #read sample.info data
ID.reference.all <- read.csv(file="Data/Tank.ID.reference.subsequent.csv", header=T) #read sample.info data
ID.reference.all.condensed <- ID.reference.all %>% dplyr::select(Tank.ID, TREATMENT.ID.TOTAL)
# show error (duplicates) in BOX ID -- identified by photos of tubes
n_occur <- data.frame(table(samples.BOX.IDs$Tube.ID)) # list of IDs and number occured
n_occur[n_occur$Freq > 1,]
# NOTE: samples.TREAT.IDs is missing the total IDs for the last three days
# can merge based on ID.reference.all
samples.TREAT.IDs.DAYS.all.other <-  samples.TREAT.IDs %>%  dplyr::filter(Date < 20190808) # all data BUT the target data for merge (rbind to this after)
unique(samples.TREAT.IDs.DAYS.all.other$Date) # check to see if it grabbed the correct data
samples.TREAT.IDs.DAYS15.21 <- samples.TREAT.IDs %>%  dplyr::filter(Date %in% c("20190808", "20190811", "20190814")) # select days without treatment ID
samples.TREAT.IDs.days15.21MERGE <- merge(samples.TREAT.IDs.DAYS15.21,
ID.reference.all.condensed ,
by = "Tank.ID") # merge with the condensed reference sheet by tank.ID to add treatments
samples.TREAT.IDs.days15.21MERGE$Treatment <- samples.TREAT.IDs.days15.21MERGE$TREATMENT.ID.TOTAL # duplicate to Treatment
samples.TREAT.IDs.days15.21MERGE <- samples.TREAT.IDs.days15.21MERGE %>% dplyr::select(-TREATMENT.ID.TOTAL) # remove to allow an rbind with the other data
samples.TREAT.IDs.FINAL <- rbind(samples.TREAT.IDs.DAYS.all.other,
samples.TREAT.IDs.days15.21MERGE) # merge the two files
# now to bind witht the -80 box ID for analysis ID
samples.TREAT.IDs.FINAL # view the tube.ID column for the raw sample collection
samples.BOX.IDs # view the box reference for each tube
SAMPLE.TRACKER <- merge(samples.TREAT.IDs.FINAL,
samples.BOX.IDs,
by = "Tube.ID")
# write table output
write.table(SAMPLE.TRACKER,"C:/Users/samjg/Documents/My_Projects/Inragenerational_thresholds_OA/RAnalysis/Sample.Tracker/Sample.Tracker.FINAL.csv",sep=",", row.names=FALSE)  # write table to output folder
#Title: Sample.tracker.ID.merge
#Author: Sam Gurr
#Edited by: Sam Gurr
#Date Last Modified: 20191008
#See Readme file for details
rm(list=ls()) #clears workspace
## install packages if you dont already have them in your library
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr')
#Read in required libraries
library(dplyr)          # Version 0.7.6, Packaged: 2018-06-27, Depends: R (>= 3.1.2)Imports: assertthat (>= 0.2.0), bindrcpp (>= 0.2.0.9000), glue (>=1.1.1), magrittr (>= 1.5), methods, pkgconfig (>= 2.0.1), R6(>= 2.2.2), Rcpp (>= 0.12.15), rlang (>= 0.2.0), tibble (>=1.3.1), tidyselect (>= 0.2.3), utils
#Required Data files
# Set Working Directory:
# setwd("~/MyProjects/Geoduck_Conditioning/RAnalysis/") #set working
setwd("C:/Users/samjg/Documents/My_Projects/Inragenerational_thresholds_OA/RAnalysis/")
#Load Sample Info
samples.TREAT.IDs <- read.csv(file="Sample.Tracker/Geoduck.sample.tracker.csv", header=T) #read sample.info data
samples.BOX.IDs <- read.csv(file="Sample.Tracker/Geoduck.Storage.Box.ID.csv", header=T) #read sample.info data
ID.reference.all <- read.csv(file="Data/Tank.ID.reference.subsequent.csv", header=T) #read sample.info data
ID.reference.all.condensed <- ID.reference.all %>% dplyr::select(Tank.ID, TREATMENT.ID.TOTAL)
# show error (duplicates) in BOX ID -- identified by photos of tubes
n_occur <- data.frame(table(samples.BOX.IDs$Tube.ID)) # list of IDs and number occured
n_occur[n_occur$Freq > 1,]
# NOTE: samples.TREAT.IDs is missing the total IDs for the last three days
# can merge based on ID.reference.all
samples.TREAT.IDs.DAYS.all.other <-  samples.TREAT.IDs %>%  dplyr::filter(Date < 20190808) # all data BUT the target data for merge (rbind to this after)
unique(samples.TREAT.IDs.DAYS.all.other$Date) # check to see if it grabbed the correct data
samples.TREAT.IDs.DAYS15.21 <- samples.TREAT.IDs %>%  dplyr::filter(Date %in% c("20190808", "20190811", "20190814")) # select days without treatment ID
samples.TREAT.IDs.days15.21MERGE <- merge(samples.TREAT.IDs.DAYS15.21,
ID.reference.all.condensed ,
by = "Tank.ID") # merge with the condensed reference sheet by tank.ID to add treatments
samples.TREAT.IDs.days15.21MERGE$Treatment <- samples.TREAT.IDs.days15.21MERGE$TREATMENT.ID.TOTAL # duplicate to Treatment
samples.TREAT.IDs.days15.21MERGE <- samples.TREAT.IDs.days15.21MERGE %>% dplyr::select(-TREATMENT.ID.TOTAL) # remove to allow an rbind with the other data
samples.TREAT.IDs.FINAL <- rbind(samples.TREAT.IDs.DAYS.all.other,
samples.TREAT.IDs.days15.21MERGE) # merge the two files
# now to bind witht the -80 box ID for analysis ID
samples.TREAT.IDs.FINAL # view the tube.ID column for the raw sample collection
samples.BOX.IDs # view the box reference for each tube
SAMPLE.TRACKER <- merge(samples.TREAT.IDs.FINAL,
samples.BOX.IDs,
by = "Tube.ID")
# write table output
write.table(SAMPLE.TRACKER,"C:/Users/samjg/Documents/My_Projects/Inragenerational_thresholds_OA/RAnalysis/Sample.Tracker/Sample.Tracker.FINAL.csv",sep=",", row.names=FALSE)  # write table to output folder
ID.reference.all
ID.reference.all.condensed
